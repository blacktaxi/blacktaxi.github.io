<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title> ocaml</title>
 <link href="http://reversemicrowave.me/tag/ocaml.xml" rel="self"/>
 <link href="http://reversemicrowave.me/tag/ocaml.html"/>
 <updated>2015-04-20T03:06:58+03:00</updated>
 <id>http://reversemicrowave.me/tag/ocaml.html</id>
 <author>
   <name>Sergey Yavnyi</name>
 </author>
 
 <entry>
   <title>Hello, js_of_ocaml</title>
   <link href="http://reversemicrowave.me/blog/2015/04/20/js_of_ocaml-pwdgen"/>
   <updated>2015-04-20T03:06:58+03:00</updated>
   <id>http://reversemicrowave.me/blog/2015/04/20/js_of_ocaml-pwdgen</id>
   <content type="html">&lt;p&gt;Recently I finally got myself to try writing some
OCaml. Of course, I never make it easy for myself, so I tried out js_of_ocaml
at the same time.&lt;/p&gt;

&lt;p&gt;I wanted to improve my &lt;a href=&quot;/blog/2013/12/19/a-password-generation-tool/&quot;&gt;password generation tool&lt;/a&gt; to
generate passwords on the client side, as server-side password generation
with security improvement pretense is just clown-worthy.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h4&gt;TL;DR&lt;/h4&gt;

&lt;p&gt;It all worked out &amp;ndash; js_of_ocaml is pretty cool, but I wouldn&amp;rsquo;t say I&amp;rsquo;d rush
to use it in a production system right away. Of course I have little to no
OCaml and js_of_ocaml experience, so perhaps with some more time invested it
gets a lot better.&lt;/p&gt;

&lt;p&gt;The end result can be seen here: &lt;a href=&quot;http://reversemicrowave.me/pwdgen&quot;&gt;password generation app (CLICK)&lt;/a&gt;.
The source code is on &lt;a href=&quot;https://github.com/blacktaxi/pwdgen/tree/8e72c559992c3b452dec99ee53c5555fff911029&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;OCaml, js_of_ocaml&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://ocaml.org/&quot;&gt;OCaml&lt;/a&gt; is a general purpose programming language with strong bias towards
statically-typed functional programming. It descends from the
ML family of languages and has been around for a rather long time now. Some of
the cool features of this language are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;first-class parametrizable modules, which are often compared to Haskell&amp;rsquo;s
typeclasses, but are in fact more powerful in a way that they can be parametrized
not only by type, but by value. (see &lt;a href=&quot;https://realworldocaml.org/v1/en/html/functors.html&quot;&gt;OCaml Functors&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;sophisticated &lt;a href=&quot;https://realworldocaml.org/v1/en/html/objects.html&quot;&gt;object system&lt;/a&gt;
with support for structural typing&lt;/li&gt;
&lt;li&gt;powerful type system with support for &lt;a href=&quot;https://blogs.janestreet.com/why-gadts-matter-for-performance/&quot;&gt;GADTs&lt;/a&gt;
and &lt;a href=&quot;http://okmij.org/ftp/Computation/lightweight-dependent-typing.html&quot;&gt;dependent types to some extent&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://ocsigen.org/js_of_ocaml/&quot;&gt;js_of_ocaml&lt;/a&gt; is an &lt;a href=&quot;https://realworldocaml.org/v1/en/html/the-compiler-backend-byte-code-and-native-code.html&quot;&gt;OCaml bytecode&lt;/a&gt; compiler that outputs JavaScript. It&amp;rsquo;s been developed since at least 2010 and
the project seems to be getting a &lt;a href=&quot;https://github.com/ocsigen/js_of_ocaml&quot;&gt;fair amount of activity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since js_of_ocaml compiles OCaml bytecode, it therefore does not limit the
language to some subset &amp;ndash; it is a full-on OCaml compiler to JavaScript.&lt;/p&gt;

&lt;h2&gt;Performance&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s hard to assess performance in my use case since I don&amp;rsquo;t do any heavy
computation and don&amp;rsquo;t rely on low latency, but let&amp;rsquo;s look at Chrome dev tools
profiler&amp;rsquo;s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer: I&amp;rsquo;m not trying to pretend this is a legit analysis of JavaScript code
generated by js_of_ocaml. I&amp;rsquo;m pretty sure it is the way it is only because I
made it so.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The program itself is rather simple. The password generation is done in
a series of steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;parse the password template, creating a password template definition structure&lt;/li&gt;
&lt;li&gt;for each item in the passowrd template, run a corresponding random token generation function&lt;/li&gt;
&lt;li&gt;concatenate the results into a single string&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Memory&lt;/h3&gt;

&lt;p&gt;According to memory profiler, each password generation run allocates about 20Mb
of heap memory. From the chart it looks like most of the allocated objects, by
volume, are strings. This looks like a pretty bad result.&lt;/p&gt;

&lt;figure class=&#39;normalsize&#39;&gt;&lt;img src=&quot;/media/2015-js_of_ocaml/memory.png&quot;&gt;&lt;figcaption&gt;Memory allocation chart for a single password generation run.&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;My guess about this is the inefficient string manipulation code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;explode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;explode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;escaped&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;implode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;(* ugh *)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;explode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OCaml&amp;rsquo;s standard library doesn&amp;rsquo;t really have a lot of string processing functions.
In fact, the string processing support in standard OCaml is rather lacking, if
no abysmal, considering it&amp;rsquo;s 2015 and there&amp;rsquo;s not Unicode support.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s no excuse to my string manipulation code &amp;ndash; I just went the simplest route and admit that efficiency of this implementation is horrible. I even used that &lt;code&gt;filter&lt;/code&gt; function in one place.&lt;/p&gt;

&lt;h3&gt;CPU&lt;/h3&gt;

&lt;p&gt;Each generation takes about 50-100ms to complete, including ~1-3 garbage
collections, on a 2.3GHz i7. Honestly, this is a pretty bad result as well. I would blame it all on the inefficient string processing again.&lt;/p&gt;

&lt;figure class=&#39;normalsize&#39;&gt;&lt;img src=&quot;/media/2015-js_of_ocaml/cpu.png&quot;&gt;&lt;figcaption&gt;Flame graph of a single password generation run.&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;It doesn&amp;rsquo;t seem to help that almost half of the time is spent doing garbage collection.&lt;/p&gt;

&lt;h3&gt;Generated code size&lt;/h3&gt;

&lt;p&gt;In my case, js_of_ocaml produced around 60kb of minified JavaScript, which I&amp;rsquo;d
say is not bad at all, especially compared to other compilers that have a
JavaScript backend. They will often drag the whole runtime into the output, compiling
a helloworld-like program to over 1Mb of JavaScript code (looking at you, GHCJS).&lt;/p&gt;

&lt;h2&gt;Ergonomics&lt;/h2&gt;

&lt;p&gt;At this minimal level of sophistication my experience with OCaml + js_of_ocaml has been
good enough &amp;ndash; it works.&lt;/p&gt;

&lt;p&gt;There are some pain points though.&lt;/p&gt;

&lt;h4&gt;Standard OCaml library&lt;/h4&gt;

&lt;p&gt;String processing support is &lt;em&gt;modest&lt;/em&gt;: not a lot of string utility functions,
no support for Unicode in the standard library. There also doesn&amp;rsquo;t seem to be
a lot of math functions in the standard library. I suppose there&amp;rsquo;s everything
you need is in the popular libraries like Batteries.&lt;/p&gt;

&lt;h4&gt;JavaScript interop&lt;/h4&gt;

&lt;p&gt;Interoperation with JavaScript could be more intuitive/documented. I think
it also could be made somewhat easier to do.&lt;/p&gt;

&lt;p&gt;Calling OCaml functions from JavaScript:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// call into js_of_ocaml code&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pwdGen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Exposing OCaml code to JavaScript:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Unsafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Unsafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pwdGen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js_generate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tpl_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;(* ... *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrap_callback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js_generate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Returning JavaScript objects from OCaml:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* ... *)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Unsafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Could not parse template: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;(* ... *)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a href=&quot;https://opam.ocaml.org/&quot;&gt;Opam&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Often, the language&amp;rsquo;s build system or the package manager can give a lot of grief to beginners.
I liked my first opam experience though. I found the compiler switching
feature very cool, although I only had to use it once so I could get js_of_ocaml
to work.&lt;/p&gt;
</content>
 </entry>
 
</feed>